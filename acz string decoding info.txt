ACZ string decoding info
========================
Relevant files containing string information and parameters are stored within mission data files, in the following files (file numbers might vary between mission files):

ENGLISH TEXT:
-------------
0005.*/0007.*: Contains character set and string data (string length, string data, speaker ID string data) as well the bitmap sheet with the used characters and its palette data.

0005 = japanese text
0007 = english text


0006.*: Contains the voice clip "pool" and the string parameter data (string IDs, voice clip to play, string display color, delays and other flags). It's shared by both localizations.

Data structure of file 0006:
----------------------------
String parameter data starts at offset 0x720 but before this point the offset 0x700 contains the amount of string parameters. The string parameter data usually spans over a length of 0x30 bytes but if the BUFFER AREA 1 value is not equal to zero then the length will be to 0x40.

TODO: figure what the remaining UNKNOWN values do

Starting from 0x720, for n value in 0x700 offset:
0x0 = unknown flag
0x1 = unknown flag
0x2 = play voice clip as background chatter flag
0x3 = unknown flag
0x4 = buffer area 1
	if BUFFER AREA 1 is NOT equal to zero then
		0x4 = unknown value
		0x8 = unknown value
		0xC = unknown value
		0x10 = unknown value
		then add +0x10 to the offsets after this to adjust them to the new position
0x8 = buffer area?
0xC = string RGBA value
0xE = play associated voice clip
0x10 = jump to voice clip ID string data
0x12 = speaker ID value
0x14 = string ID value
0x16 = play SFX ID with current voice clip
0x18 = voice clip start delay value
0x1A = voice clip end delay value
0x1C = unknown delay value
0x20 = buffer area (last byte acts as string color display flag)
0x24 = unknown
0x28 = unknown
0x30 = unknown/end of string parameter data


Data structure of file 0005/0007:
---------------------------------
Note: this applies to both SPEAKER ID and STRING sections. Encoding seems to be UTF-16.

0x0 = amount of strings
0x2 = character display offset
0x4 = amount of characters in table
0x6 = unknown
0x8 = unknown
0xA = Vertical text leading value
0xC = unknown
0xE = unknown
(Amount of characters in table * 0x200) = character table offset start
(Amount of characters in table * 0x10) = character table offset length
Repeat for amount of characters in table and begin at character table offset start:
	Character table offset start = length of blank space between words
	Character table offset start + 0x2 = How much of the character tile will be displayed on the screen
	Character table offset start + 0x4 = Some type of buffer values
	Character table offset start + 0x8 = ASCII character ID
	Character table offset start + 0xA = Some type of buffer values
0xVARIABLE_LENGTH_PADDING = zero padding
0xVARIABLE_LENGTH_STRING_LENGTH = speaker ID/mission string length (amount of strings * 2)
0xVARIABLE_LENGTH_PADDING = zero padding
0xVARIABLE_LENGTH_STRING_OFFSET = speaker ID/mission string offset (amount of string offsets * 4 = speaker ID/mission string offset length)
0xVARIABLE_LENGTH_STRING_DATA = string data ((sum of all items in STRING_LENGTH) * 2 = string data length)
0xVARIABLE_LENGTH_PADDING = zero padding
0xBITMAP_PALETTE = character sheet bitmap palette data (0x40 = length)
0xVARIABLE_LENGTH_CHARACTER_SHEET_BITMAP = character sheet bitmap (amount of characters in table in table * 0x200 = length)

Other files with string data:
-----------------------------
Besides the data used for mission dialogue, there's also strings for things like cutscenes and text used during the pause menu. Not all mission files contains the cutscene-related string files and the strings for the pause menu text is usually stored at the end of the mission file list, with the cutscene text located right after the english script.

Usually these files store the japanese script first then the english one after. The other was not checked in other languages.